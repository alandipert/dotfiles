;; -*- mode: dotspacemacs; lexical-binding: t -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Configuration Layers declaration."
  (setq-default
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (ie. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '("~/.spacemacs-layers/")
   ;; List of configuration layers to load. If it is the symbol `all' instead
   ;; of a list then all discovered layers will be installed.
   dotspacemacs-configuration-layers '(auto-completion
                                       clojure
                                       csharp
                                       common-lisp
                                       dockerfile
                                       emacs-lisp
                                       git
                                       github
                                       haskell
                                       html
                                       (ibuffer :variables ibuffer-group-buffers-by 'projects ibuffer-old-time 8)
                                       javascript
                                       markdown
                                       org
                                       shell
                                       sml
                                       syntax-checking
                                       themes-megapack
                                       ;; Private local layer
                                       yeti)
   ;; A list of packages and/or extensions that will not be install and loaded.
   dotspacemacs-excluded-packages '()
   ;; If non-nil spacemacs will delete any orphan packages, i.e. packages that
   ;; are declared in a layer which is not a member of
   ;; the list `dotspacemacs-configuration-layers'
   dotspacemacs-delete-orphan-packages t
   dotspacemacs-additional-packages '()))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to a .PNG file.
   ;; If the value is nil then no banner is displayed.
   ;; dotspacemacs-startup-banner 'official
   dotspacemacs-startup-banner 'official
   evil-escape-key-sequence "fd"
   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press <SPC> T n to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(smyx leuven)
   ;; If non nil the cursor color matches the state color.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; Default font. `powerline-scale' allows to quickly tweak the mode-line
   ;; size to make separators look not too crappy.
   dotspacemacs-default-font '("Fantasque Sans Mono"
                               :size 16
                               :weight normal
                               :width normal
                               :powerline-scale 1.1)
   ;; The leader key
   dotspacemacs-leader-key "SPC"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it.
   dotspacemacs-emacs-leader-key "M-m"
   dotspacemacs-major-mode-leader-key ","
   ;; The command key used for Evil commands (ex-commands) and
   ;; Emacs commands (M-x).
   ;; By default the command key is `:' so ex-commands are executed like in Vim
   ;; with `:' and Emacs commands are executed with `<leader> :'.
   dotspacemacs-command-key ":"
   ;; If non nil the paste micro-state is enabled. While enabled pressing `p`
   ;; several times cycle between the kill ring content.
   dotspacemacs-enable-paste-micro-state t
   ;; Guide-key delay in seconds. The Guide-key is the popup buffer listing
   ;; the commands bound to the current keystrokes.
   dotspacemacs-guide-key-delay 0.4
   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil ;; to boost the loading time.
   dotspacemacs-loading-progress-bar t
   ;; If non nil the frame is fullscreen when Emacs starts up.
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX."
   dotspacemacs-fullscreen-use-non-native nil
   ;; If non nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'.
   dotspacemacs-active-transparency 90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'.
   dotspacemacs-inactive-transparency 90
   ;; If non nil unicode symbols are displayed in the mode line.
   dotspacemacs-mode-line-unicode-symbols t
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters the
   ;; point when it reaches the top or bottom of the screen.
   dotspacemacs-smooth-scrolling t
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   dotspacemacs-smartparens-strict-mode t
   ;; If non nil advises quit functions to keep server open when quitting.
   dotspacemacs-persistent-server nil
   ;; Not used for now.
   dotspacemacs-default-package-repository nil
   ;; User initialization goes 2

   dotspacemacs-editing-style 'vim
   dotspacemacs-use-ido t))

(defun alandipert/change-font-size (multiplier)
  "Change the font size globally."
  (set-face-attribute 'default nil :height
                      (floor (* multiplier
                                (face-attribute 'default :height)))))

(defun alandipert/increase-font-size ()
  "Increase font size globally."
  (interactive)
  (alandipert/change-font-size 1.10))

(defun alandipert/decrease-font-size ()
  "Decrease font size globally."
  (interactive)
  (alandipert/change-font-size 0.9))

(defun alandipert/fix-frame ()
  "Toggle fullscreen on an off.  i3 workaround."
  (interactive)
  (spacemacs/toggle-fullscreen-frame-on)
  (spacemacs/toggle-fullscreen-frame-off))

(defun dotspacemacs/user-config ()
  "Configuration function for user code.
This function is called at the very end of Spacemacs
initialization after layers configuration. You are free to put
layers configuration."
  (require 'multiple-cursors)
  (let* ((extensions! (lambda (mode exts)
                        (dolist (ext exts)
                          (add-to-list 'auto-mode-alist (cons ext mode))))))

    ;; Put customizations in ~/.custom.el, creating it if necessary.
    (setq custom-file "~/.custom.el")
    (when (not (file-exists-p "~/.custom.el"))
      (write-region nil nil "~/.custom.el"))
    (load custom-file)

    ;; Favorite indents for various modes.
    (setq c-basic-offset 2
          js-indent-level 2
          tab-width 4
          indent-tabs-mode t
          sgml-basic-offset 2
          web-mode-markup-indent-offset 2)

    (add-hook 'sml-mode-hook
              (lambda ()
                (setq sml-indent-level 2
                      words-include-escape t
                      indent-tabs-mode nil)))

    (add-hook 'java-mode-hook (lambda ()
                                (setq c-basic-offset 2)))
    (add-hook 'css-mode-hook (lambda ()
                               (setq css-basic-offset 2)))
    (add-hook 'sh-mode-hook (lambda ()
                              (setq sh-basic-offset 2
                                    sh-basic-indent-line 2)))

    ;; Add mlton mlb files as SML
    (funcall extensions! 'sml-mode '("\\.mlb\\'"))

    ;; Clojure indentation for Boot, Hoplon, and ClojureScript files.
    (funcall extensions! 'clojure-mode '("\\.boot\\'" "\\.cljs\\'" "\\.cljs.hl\\'"))

    (setq html5-elements
          '(a abbr acronym address applet area article aside audio b base basefont
              bdi bdo big blockquote body br button canvas caption center cite code
              col colgroup command data datalist dd del details dfn dir div dl
              dt em embed eventsource fieldset figcaption figure font footer form frame frameset
              h1 h2 h3 h4 h5 h6 head header hgroup hr html i
              iframe img input ins isindex kbd keygen label legend li link html-map
              main mark menu html-meta meter nav noframes noscript object ol optgroup
              option output p param pre progress q rp rt ruby
              s p samp script section select small source span strike strong style sub
              summary sup table tbody td textarea tfoot th thead html-time
              title tr track tt u ul html-var video wbr))

    (add-hook 'clojure-mode-hook
              '(lambda () (prettify-symbols-mode)))

    (add-hook 'clojure-mode-hook
              '(lambda ()
                 (dolist (el html5-elements)
                   (put-clojure-indent el 'defun))))

    (add-hook 'clojure-mode-hook
              '(lambda ()
                 ;; Hoplon functions and macros
                 (dolist (sym '(page loop-tpl))
                   (put-clojure-indent sym 'defun))))

	;; Clojure friendly word definitions in Emacs
	;; https://timothypratley.blogspot.com/2014/08/clojure-friendly-word-definitions-in.html
	(dolist (c (string-to-list ":_-?!#*"))
	  (modify-syntax-entry c "w" emacs-lisp-mode-syntax-table))

    (setq cider-boot-parameters "cider repl -s wait")

    (add-hook 'sml-mode-hook
              '(lambda () (prettify-symbols-mode)))

    (evil-leader/set-key "ol"  'evil-lisp-state)
    ;; Don't automatically enter lisp-state after invoking a lisp state command
    ;; (setq evil-lisp-state-enter-lisp-state-on-command nil)

    ;; Make the line number gutter look cool
    (setq linum-format "%4d \u2502")

    ;; Increase and decrease font size globally with SPC o f +/-
    (evil-leader/set-key "of+" 'alandipert/increase-font-size)
    (evil-leader/set-key "of-" 'alandipert/decrease-font-size)
    (evil-leader/set-key "or" 'redraw-display)
    (evil-leader/set-key "ot" 'alandipert/fix-frame)

    (when (eq window-system 'x)
      (alandipert/fix-frame))

    ;; Puts the time in the modeline
    (display-time-mode 1)

    ;; Open .asc/.gpg files with decrypt/encrypt magic
    (require 'epa-file)
    (epa-file-enable)
    (setq epa-file-name-regexp "\\.\\(gpg\\|asc\\)$"
          epa-armor t)
    (epa-file-name-regexp-update)

    ;; indent guide is awesome, turn it on all the time
    (spacemacs/toggle-indent-guide-globally-on)
    (setq indent-guide-recursive t)

    (defadvice isearch-search (after isearch-no-fail activate)
      (unless isearch-success
        (ad-disable-advice 'isearch-search 'after 'isearch-no-fail)
        (ad-activate 'isearch-search)
        (isearch-repeat (if isearch-forward 'forward))
        (ad-enable-advice 'isearch-search 'after 'isearch-no-fail)
        (ad-activate 'isearch-search)))))
